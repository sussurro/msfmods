require 'pp'

class PigSSDP < PigParser

	def register_rules
		self.rules = {
			:eth => { :dst_mac => "01:00:5e:7f:ff:fa" },
			:udp => { :dst_port => 1900  },
		}
	end

	def parse(pkt)
		eth = pkt[:eth]
		ip = pkt[:ip]
		
		return if not ip or not eth
						

		udp = Racket::L4::UDP.new(ip.payload)
		return if not udp

		payload = udp.payload
		return if not payload
		return if not payload.start_with?("NOTIFY")
		arr = payload.split("\r\n")
		data = {}
		arr.each { |l|
			data['location'] = l.split(": ",2).last if l.upcase.start_with?("LOCA")
			data['server'] = l.split(": ",2).last if l.upcase.start_with?("SERV")
		}
		print_status("SSDP Host: #{ip.src_ip}")
		report_note( :host  => ip.src_ip,
                	:type  => "passive.SSDP",
                	:port => 1900,
                	:proto => "udp",
                	:data => data )

								
	end # end of parse
end

