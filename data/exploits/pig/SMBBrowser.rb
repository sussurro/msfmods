class PigSMBBrowser < PigParser

	def register_rules
		self.rules = {
			:eth => { :dst_mac => "ff:ff:ff:ff:ff:ff" },
			:udp => { :dst_port => 138 , :src_port => 138 },
		}
	end

	def parse(pkt)
		eth = pkt[:eth]
		ip = pkt[:ip]
		
		return if not ip or not eth
						
		stypes = ["Workstation", "Server", "SQL Server", "Domain Controller", "Backup Controller", "Time Source", "Apple", "Novell", "Domain Member Server", "Print Server", "Dialin Server", "Xenix Server", "NT Workstation", "WFW Host", "UNDEFINED", "NT Server", "Potential Browser", "Backup Browser", "Master Browser", "Domain Master Browser", "OSF Host", "VMS Host", "Windows 95+", "DFS Server", "Undefined", "Undefined", "Undefined", "Undefined", "Undefined", "Undefined", "Local List", "Domain Enum"]

		udp = Racket::L4::UDP.new(ip.payload)
		return if not udp

		payload = udp.payload
		return if not payload

		#Get UDP Source Name
		siz1 = payload[14]
		nam1 = payload[15..(15 + siz1)]

		#Get Name Length Offset and get Domain Name
		nl = 15 + siz1 + 1
		siz2 = payload[nl]
		nam2 = payload[(nl+1)..(nl+1+siz2)]

		#set SMB Hostname and Domain broadcast
		name1 = Rex::Proto::SMB::Utils.nbname_decode(nam1).chop.unpack("A*").first
		domain= Rex::Proto::SMB::Utils.nbname_decode(nam2).chop.split(" ").first
		
		#take netbios data from packet
		netbios = payload[82..-1]
		return if (netbios[1..3] != "SMB")
		return if (netbios[4] != 37)
		trans = netbios[32..-1]
		offs =  trans[25]
		browser = netbios[offs..-1]
		return if browser[0].to_i != 1
		smbname = browser[6..21].split("\00")[0]
		type = browser[24,4].unpack("V").first.to_i
		typestr = ""
		for j in (0..30)
			if (type & (1 << j)) > 0
				typestr += stypes[j] + " ,"
			end
		end
		version = browser[22].to_s + "." + browser[23].to_s
		typestr = typestr.chop.unpack("A*").first
		note = browser[32..-1]
		print_status("SMB Host: #{domain}\\#{name1} (WIN #{version}) : #{note}")

		data = { :os_ver => version,
		:type => typestr,
		:note => browser[32..-1].chop,
		:domain => domain }

		report_note( :host  => ip.src_ip,
		:type  => "passive.smb_browser",
		:port => 138,
		:proto => "udp",
		:data => data )
								
	end # end of parse
end

